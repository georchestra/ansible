- name: set a bunch of vars
  set_fact:
    initscript: "/etc/init.d/jetty-{{ item.key }}"
    instance_name: "jetty-{{ item.key }}"
    instance_config: "{{ item.value }}"
    instance_logdir: "{{ logs_basedir }}/jetty/{{ item.key }}"

- name: copy initscript
  command: "cp /etc/init.d/jetty8 {{ initscript }}"
  args:
    creates: "{{ initscript }}"

- name: fixup Provides
  lineinfile:
    dest: "{{ initscript }}"
    regexp: '^# Provides:.*jetty.*$'
    line: "# Provides: {{ instance_name }}"
    state: present

- name: fixup NAME
  lineinfile:
    dest: "{{ initscript }}"
    regexp: '^NAME.*$'
    line: "NAME={{ instance_name }}"
    state: present

- name: fixup JETTY_HOME
  lineinfile:
    dest: "{{ initscript }}"
    regexp: '^JETTY_HOME.*$'
    line: "JETTY_HOME={{ jetty_basedir }}/{{ item.key }}"
    state: present

- name: create JETTY_HOME
  file:
    path: "{{ jetty_basedir }}/{{ item.key }}"
    owner: jetty
    state: directory

- name: create logdir
  file:
    path: "{{ instance_logdir }}"
    owner: jetty
    state: directory

- name: symlink start.jar
  file:
    src: /usr/share/jetty8/start.jar
    dest: "{{ jetty_basedir }}/{{ item.key }}/start.jar"
    state: link

- name: symlink start.ini
  file:
    src: /usr/share/jetty8/start.ini
    dest: "{{ jetty_basedir }}/{{ item.key }}/start.ini"
    state: link

- name: symlink lib
  file:
    src: /usr/share/jetty8/lib
    dest: "{{ jetty_basedir }}/{{ item.key }}/lib"
    state: link

- name: symlink etc
  file:
    src: /usr/share/jetty8/etc
    dest: "{{ jetty_basedir }}/{{ item.key }}/etc"
    state: link

- name: install instance config in /etc/default
  template: src=jetty-config.j2 dest=/etc/default/{{ instance_name }}

#- name: install instance connector
#  template: src=server-{{ item }}.xml.j2 dest={{ tomcat_basedir }}/{{ item }}/conf/server.xml

- name: reload systemd so that it finds the new unit
  command: systemctl daemon-reload

- name: enable instance
  service:
    name: "{{ instance_name }}"
    enabled: yes
    state: started

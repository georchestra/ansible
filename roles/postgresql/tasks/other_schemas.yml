- name: create temporary directory
  shell: mktemp -d
  check_mode: no
  register: tempdir

- name: fetch db structure
  get_url:
    dest: "{{ tempdir.stdout }}/{{ item.0 }}.sql"
    url: "{{ item.1 }}"
    validate_certs: no
  with_together:
    - "{{ other_schemas }}"
    - "{{ other_schemas_urls }}"

- name: check if mapfishapp schema already exists
  command: psql -d {{ georchestra.db.name }} -t -c "select * from pg_tables where schemaname='{{ item }}';"
  register: schema_exists
  with_items: "{{ other_schemas }}"

- name: create missing schemas
  command: psql -d {{ georchestra.db.name }} -f {{ tempdir.stdout }}/{{ item.item }}.sql
  when: "item.stdout is defined and '{{ item.item }}' not in item.stdout"
  with_items: "{{ schema_exists.results }}"

- name: check if console.delegations exists
  check_mode: no
  command: psql -d {{ georchestra.db.name }} -t -c "\dt console.delegations"
  register: delegations_exist

- name: fetch console data
  get_url:
    url: https://raw.github.com/georchestra/georchestra/18.06/postgresql/041-console-data.sql
    dest: "{{ tempdir.stdout }}/041-console-data.sql"
  when: "delegations_exist.stdout is defined and 'delegations' not in delegations_exist.stdout"

- name: remove docker-only lines
  lineinfile:
    dest: "{{ tempdir.stdout }}/041-console-data.sql"
    regexp: ".*docker.*"
    state: absent
  when: "delegations_exist.stdout is defined and 'delegations' not in delegations_exist.stdout"

- name: create console example data
  command: psql -d {{ georchestra.db.name }} -f {{ tempdir.stdout }}/041-console-data.sql
  when: "delegations_exist.stdout is defined and 'delegations' not in delegations_exist.stdout"

- name: recursively purge temp dir
  check_mode: no
  file:
    dest: "{{ tempdir.stdout }}"
    state: absent

- name: grant all privileges to georchestra user on schema
  postgresql_privs:
    database: "{{ georchestra.db.name }}"
    privs: ALL
    type: schema
    roles: "{{ georchestra.db.user }}"
    objs: "{{ other_schemas|join(',') }}"

- name: grant all privileges to georchestra user on sequences in schema
  postgresql_privs:
    database: "{{ georchestra.db.name }}"
    privs: ALL
    type: sequence
    schema: "{{ item }}"
    roles: "{{ georchestra.db.user }}"
    objs: ALL_IN_SCHEMA
  with_items: "{{ other_schemas }}"

- name: grant all privileges to georchestra user on tables in schema
  postgresql_privs:
    database: "{{ georchestra.db.name }}"
    privs: ALL
    type: table
    schema: "{{ item }}"
    roles: "{{ georchestra.db.user }}"
    objs: ALL_IN_SCHEMA
  with_items: "{{ other_schemas }}"
